callander: permitted syscalls: dup(any) @ ld-musl-aarch64.so.1+0x6867c(dup+16)
fcntl(any, F_GETOWN_EX, any) @ ld-musl-aarch64.so.1+0x20a80(fcntl+88)
fcntl(any, F_DUPFD-F_SETLK, any) @ ld-musl-aarch64.so.1+0x20ab4(fcntl+140)
fcntl(any, F_SETOWN, any) @ ld-musl-aarch64.so.1+0x20ab4(fcntl+140)
fcntl(any, F_SETSIG-0x405, any) @ ld-musl-aarch64.so.1+0x20ab4(fcntl+140)
fcntl(any, F_SETPIPE_SZ-0xffffffffffffffff, any) @ ld-musl-aarch64.so.1+0x20ab4(fcntl+140)
fcntl(any, F_GETOWN, any) @ ld-musl-aarch64.so.1+0x20af4(fcntl+204)
fcntl(any, F_DUPFD_CLOEXEC, any) @ ld-musl-aarch64.so.1+0x20b1c(fcntl+244)
fcntl(any, F_SETFD, FD_CLOEXEC) @ ld-musl-aarch64.so.1+0x20b3c(fcntl+276)
fcntl(any, F_DUPFD_CLOEXEC, 0) @ ld-musl-aarch64.so.1+0x20b54(fcntl+300)
fcntl(any, F_DUPFD, any) @ ld-musl-aarch64.so.1+0x20b88(fcntl+352)
fcntl(any, F_SETFD, FD_CLOEXEC) @ ld-musl-aarch64.so.1+0x20c20(open+136)
fcntl(STDIN_FILENO-0x7fffffff, F_GETFD, any) @ ld-musl-aarch64.so.1+0x52960(fstatat+88)
fcntl(any, F_SETLKW, any) @ ld-musl-aarch64.so.1+0x60868
fcntl(any, F_SETLKW, any) @ ld-musl-aarch64.so.1+0x614fc(__syscall_cp_c*+200)
ioctl(any, TIOCGWINSZ, any) @ ld-musl-aarch64.so.1+0x53598(__stdout_write*+56)
flock(any, any) @ ld-musl-aarch64.so.1+0x2459c(flock+20)
faccessat(AT_FDCWD, any, W_OK|R_OK) @ ld-musl-aarch64.so.1+0x6854c(access+28)
openat(AT_FDCWD, "/dev/null", O_RDWR|O_NOFOLLOW, any) @ ld-musl-aarch64.so.1+0x1ffe4(__init_libc*+424)
openat(AT_FDCWD, any, any, any) @ ld-musl-aarch64.so.1+0x60868
openat(AT_FDCWD, any, any, any) @ ld-musl-aarch64.so.1+0x614fc(__syscall_cp_c*+200)
openat(AT_FDCWD, any, O_RDONLY|O_NONBLOCK|O_NOFOLLOW|O_CLOEXEC, any) @ ld-musl-aarch64.so.1+0x64fa8(__map_file*+36)
close(STDIN_FILENO-0xffffffffffffffe9) @ ld-musl-aarch64.so.1+0x20b6c(fcntl+324)
close(any) @ ld-musl-aarch64.so.1+0x53294(__stdio_close*+24)
close(any) @ ld-musl-aarch64.so.1+0x60868
close(any) @ ld-musl-aarch64.so.1+0x614fc(__syscall_cp_c*+200)
close(any) @ ld-musl-aarch64.so.1+0x64fd4(__map_file*+80)
close(any) @ ld-musl-aarch64.so.1+0x65014(__map_file*+144)
lseek(any, any, any) @ ld-musl-aarch64.so.1+0x68e18(lseek+12)
read(any, any, any) @ ld-musl-aarch64.so.1+0x5340c(__stdio_read*+144)
readv(any, any, 2) @ ld-musl-aarch64.so.1+0x533c8(__stdio_read*+76)
writev(any, any, any) @ ld-musl-aarch64.so.1+0x53520(__stdio_write*+184)
ppoll(any, 3, any, 0, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x1ff94(__init_libc*+344)
newfstatat(STDIN_FILENO-0x7fffffff, "", any, AT_EMPTY_PATH) @ ld-musl-aarch64.so.1+0x52978(fstatat+112)
newfstatat(AT_FDCWD, any, any, 0) @ ld-musl-aarch64.so.1+0x529b0(fstatat+168)
newfstatat(0x80000000--1 as u32, "", any, AT_EMPTY_PATH) @ ld-musl-aarch64.so.1+0x529cc(fstatat+196)
fstat(STDIN_FILENO-0x7fffffff, any) @ ld-musl-aarch64.so.1+0x52944(fstatat+60)
exit(0) @ ld-musl-aarch64.so.1+0x60808
exit(0xfffffffffffff001-0xffffffffffffffff) @ ld-musl-aarch64.so.1+0x60808
exit(any) @ ld-musl-aarch64.so.1+0x60840
exit(0) @ ld-musl-aarch64.so.1+0x623c0(pthread_exit+416)
exit(0) @ ld-musl-aarch64.so.1+0x62464(start*+104)
exit_group(any) @ ld-musl-aarch64.so.1+0x206d8(_Exit+12)
set_tid_address(ld-musl-aarch64.so.1+0xc2e80(__thread_list_lock*)) @ ld-musl-aarch64.so.1+0x4826c(__post_Fork*+44)
set_tid_address(any) @ ld-musl-aarch64.so.1+0x62458(start*+92)
futex(any, FUTEX_WAIT, any, 0, any, any)
futex(any, FUTEX_WAKE, 0-INT_MAX, any, any u32, INT_MAX)
futex(any, FUTEX_WAKE, 1, any, any, any)
futex(any, FUTEX_WAKE, INT_MAX, any, any, any)
futex(any, FUTEX_REQUEUE, 0, 1, ld-musl-aarch64.so.1+0xc2ab4, any)
futex(any, FUTEX_LOCK_PI-FUTEX_UNLOCK_PI, 0, 0, any, any)
futex(any, FUTEX_UNLOCK_PI, any, any, any, any)
futex(any, FUTEX_WAIT|FUTEX_PRIVATE_FLAG, any, 0, any, any)
futex(any, FUTEX_WAKE|FUTEX_PRIVATE_FLAG, 0-INT_MAX, any, any u32, INT_MAX)
futex(any, FUTEX_WAKE|FUTEX_PRIVATE_FLAG, 1, any, any, any)
futex(any, FUTEX_WAKE|FUTEX_PRIVATE_FLAG, INT_MAX, any, any, any)
futex(any, FUTEX_REQUEUE|FUTEX_PRIVATE_FLAG, 0, 1, ld-musl-aarch64.so.1+0xc2ab4, any)
futex(any, FUTEX_LOCK_PI|FUTEX_PRIVATE_FLAG-FUTEX_UNLOCK_PI|FUTEX_PRIVATE_FLAG, 0, 0, any, any)
futex(any, FUTEX_UNLOCK_PI|FUTEX_PRIVATE_FLAG, any, any, any, any)
set_robust_list(0, sizeof(struct robust_list_head)) @ ld-musl-aarch64.so.1+0x623ec(pthread_exit+460)
set_robust_list(any, sizeof(struct robust_list_head)) @ ld-musl-aarch64.so.1+0x634f4(__pthread_mutex_trylock_owner*+92)
timer_create(CLOCK_MONOTONIC, any, any) @ ld-musl-aarch64.so.1+0x67f80(timer_create+140)
timer_create(CLOCK_MONOTONIC, any, any) @ ld-musl-aarch64.so.1+0x68080(timer_create+396)
timer_settime(any, 0, any, 0) @ ld-musl-aarch64.so.1+0x68200(timer_settime+20)
timer_delete(0-INT_MAX) @ ld-musl-aarch64.so.1+0x67e5c(start*+120)
timer_delete(any) @ ld-musl-aarch64.so.1+0x68154(timer_delete+8)
clock_gettime(CLOCK_MONOTONIC_RAW, any) @ ld-musl-aarch64.so.1+0x66774(clock_gettime+60)
clock_gettime(any u32, any) @ [vdso]+0x37c(__kernel_clock_gettime+188)
clock_getres(any u32, any) @ [vdso]+0x76c(__kernel_clock_getres+100)
sched_setscheduler(any, any, any) @ ld-musl-aarch64.so.1+0x62704(pthread_create+568)
restart_syscall()
tkill(any, SIGSETXID) @ ld-musl-aarch64.so.1+0x61398(cancel_handler*+132)
tkill(non-NULL, SIGSETXID) @ ld-musl-aarch64.so.1+0x6311c(pthread_kill+68)
tkill(any, SIGCANCEL) @ ld-musl-aarch64.so.1+0x68180(timer_delete+52)
rt_sigaction(SIGALRM, any, 0, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x51e00(__libc_sigaction*+140)
rt_sigaction(SIGCHLD, any, any, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x51e00(__libc_sigaction*+140)
rt_sigaction(SIGCANCEL-SIGSETXID, any, 0, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x51e00(__libc_sigaction*+140)
rt_sigprocmask(SIG_BLOCK, ld-musl-aarch64.so.1+0xa1060(all_mask*), any, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x51b5c(__block_all_sigs*+24)
rt_sigprocmask(SIG_BLOCK, ld-musl-aarch64.so.1+0xa1058(app_mask*), any, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x51b7c(__block_app_sigs*+24)
rt_sigprocmask(SIG_SETMASK, any, 0, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x51b98(__restore_sigs*+20)
rt_sigprocmask(SIG_UNBLOCK, any, 0, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x51ecc(__libc_sigaction*+344)
rt_sigprocmask(SIG_SETMASK, any, 0, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x62480(start*+132)
rt_sigprocmask(SIG_UNBLOCK, any, 0, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x62804(pthread_create+824)
rt_sigprocmask(SIG_BLOCK, any, any, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x64250(pthread_sigmask+24)
rt_sigprocmask(SIG_SETMASK, any, 0, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x64250(pthread_sigmask+24)
rt_sigprocmask(SIG_BLOCK, any, 0, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x68028(timer_create+308)
rt_sigtimedwait(any, any, 0, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x60868
rt_sigtimedwait(any, any, 0, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x614fc(__syscall_cp_c*+200)
rt_sigreturn(any) @ ld-musl-aarch64.so.1+0x51b18
gettimeofday(non-NULL, any) @ [vdso]+0x658(__kernel_gettimeofday+256)
brk(any) @ ld-musl-aarch64.so.1+0x294b8(__malloc_alloc_meta*+332)
brk(0) @ ld-musl-aarch64.so.1+0x29570(__malloc_alloc_meta*+516)
brk(any) @ ld-musl-aarch64.so.1+0x29590(__malloc_alloc_meta*+548)
munmap(any, any) @ ld-musl-aarch64.so.1+0x3e254(munmap+36)
munmap(any, any) @ ld-musl-aarch64.so.1+0x60800
clone(SIGCHLD, 0, any, any, any) @ ld-musl-aarch64.so.1+0x482fc(_Fork+48)
clone(CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID|CLONE_DETACHED, any, any, any, ld-musl-aarch64.so.1+0xc2e80(__thread_list_lock*)) @ ld-musl-aarch64.so.1+0x60828
mmap(0, NULL-0x7ffffffffffffffe, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) @ ld-musl-aarch64.so.1+0x3e074(mmap+64)
mmap(0, NULL-0x7ffffffffffffffe, PROT_READ, MAP_SHARED, any, 0) @ ld-musl-aarch64.so.1+0x3e074(mmap+64)
mmap(0, NULL-0x7ffffffffffffffe, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) @ ld-musl-aarch64.so.1+0x3e074(mmap+64)
mmap(any, any, any, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, any, any) @ ld-musl-aarch64.so.1+0x3e074(mmap+64)
mprotect(any, any, PROT_READ|PROT_WRITE) @ ld-musl-aarch64.so.1+0x3e124(mprotect+56)
mprotect(any, any, PROT_READ) @ ld-musl-aarch64.so.1+0x6b128(reloc_all*+268)
wait4(0x1-0x7fffffff, any, 0, 0) @ ld-musl-aarch64.so.1+0x60868
wait4(0x1-0x7fffffff, any, 0, 0) @ ld-musl-aarch64.so.1+0x614fc(__syscall_cp_c*+200)
membarrier(MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED, 0) @ ld-musl-aarch64.so.1+0x24824(__membarrier_init*+12)
