callander: permitted syscalls: dup(any) @ ld-musl-aarch64.so.1+0x68678(dup+16)
fcntl(any, F_SETFD, FD_CLOEXEC) @ ld-musl-aarch64.so.1+0x20c20(open+136)
fcntl(any, F_SETFD, FD_CLOEXEC) @ ld-musl-aarch64.so.1+0x45cb8(socket+132)
fcntl(STDIN_FILENO-0x7fffffff, F_GETFD, any) @ ld-musl-aarch64.so.1+0x5295c(fstatat+88)
fcntl(any, F_SETFD, FD_CLOEXEC) @ ld-musl-aarch64.so.1+0x52e74(fdopen+120)
fcntl(any, F_SETFD, FD_CLOEXEC) @ ld-musl-aarch64.so.1+0x5476c(fopen+116)
ioctl(any, TIOCGWINSZ, any) @ ld-musl-aarch64.so.1+0x52eb4(fdopen+184)
ioctl(any, TIOCGWINSZ, any) @ ld-musl-aarch64.so.1+0x53594(__stdout_write*+56)
fstatfs(any, any) @ ld-musl-aarch64.so.1+0x52c14(fstatfs+40)
faccessat(AT_FDCWD, "/sys/fs/selinux", F_OK) @ ld-musl-aarch64.so.1+0x68548(access+28)
faccessat(AT_FDCWD, "/sys/kernel/security/apparmor", F_OK) @ ld-musl-aarch64.so.1+0x68548(access+28)
openat(AT_FDCWD, "/dev/null", O_RDWR|O_NOFOLLOW, any) @ ld-musl-aarch64.so.1+0x1ffe4(__init_libc*+424)
openat(AT_FDCWD, any, O_RDONLY|O_CLOEXEC, any) @ ld-musl-aarch64.so.1+0x54748(fopen+80)
openat(AT_FDCWD, "/proc/sys/kernel/cap_last_cap", O_RDONLY, any) @ ld-musl-aarch64.so.1+0x54748(fopen+80)
openat(AT_FDCWD, "/proc/self/attr/exec", O_RDWR, any) @ ld-musl-aarch64.so.1+0x54748(fopen+80)
openat(AT_FDCWD, any, O_RDONLY|O_NOFOLLOW|O_CLOEXEC|O_PATH, any) @ ld-musl-aarch64.so.1+0x60864
openat(AT_FDCWD, "/proc/self/attr/current", O_RDONLY|O_NOFOLLOW, any) @ ld-musl-aarch64.so.1+0x60864
openat(AT_FDCWD, "/proc/self/attr/exec", O_RDWR|O_NOFOLLOW, any) @ ld-musl-aarch64.so.1+0x60864
openat(AT_FDCWD, "/proc/sys/kernel/cap_last_cap", O_RDONLY|O_NOFOLLOW, any) @ ld-musl-aarch64.so.1+0x60864
openat(AT_FDCWD, any, O_RDONLY|O_NOFOLLOW|O_CLOEXEC|O_PATH, any) @ ld-musl-aarch64.so.1+0x614f8(__syscall_cp_c*+200)
openat(AT_FDCWD, "/proc/self/attr/current", O_RDONLY|O_NOFOLLOW, any) @ ld-musl-aarch64.so.1+0x614f8(__syscall_cp_c*+200)
openat(AT_FDCWD, "/proc/self/attr/exec", O_RDWR|O_NOFOLLOW, any) @ ld-musl-aarch64.so.1+0x614f8(__syscall_cp_c*+200)
openat(AT_FDCWD, "/proc/sys/kernel/cap_last_cap", O_RDONLY|O_NOFOLLOW, any) @ ld-musl-aarch64.so.1+0x614f8(__syscall_cp_c*+200)
openat(AT_FDCWD, any, O_RDONLY|O_NONBLOCK|O_NOFOLLOW|O_CLOEXEC, any) @ ld-musl-aarch64.so.1+0x64fa4(__map_file*+36)
close(any) @ ld-musl-aarch64.so.1+0x53290(__stdio_close*+24)
close(any) @ ld-musl-aarch64.so.1+0x547bc(fopen+196)
close(any) @ ld-musl-aarch64.so.1+0x60864
close(any) @ ld-musl-aarch64.so.1+0x614f8(__syscall_cp_c*+200)
close(any) @ ld-musl-aarch64.so.1+0x64fd0(__map_file*+80)
close(any) @ ld-musl-aarch64.so.1+0x65010(__map_file*+144)
lseek(any, any, any) @ ld-musl-aarch64.so.1+0x68e14(lseek+12)
read(any, any, any) @ ld-musl-aarch64.so.1+0x53408(__stdio_read*+144)
read(STDIN_FILENO-0xfffffffffffffffe, any, 0x1001) @ ld-musl-aarch64.so.1+0x60864
read(any, any, 7) @ ld-musl-aarch64.so.1+0x60864
read(STDIN_FILENO-0xfffffffffffffffe, any, 0x1001) @ ld-musl-aarch64.so.1+0x614f8(__syscall_cp_c*+200)
read(any, any, 7) @ ld-musl-aarch64.so.1+0x614f8(__syscall_cp_c*+200)
write(STDIN_FILENO-0xfffffffffffffffe, non-NULL, any) @ ld-musl-aarch64.so.1+0x60864
write(STDIN_FILENO-0xfffffffffffffffe, non-NULL, any) @ ld-musl-aarch64.so.1+0x614f8(__syscall_cp_c*+200)
readv(any, any, 2) @ ld-musl-aarch64.so.1+0x533c4(__stdio_read*+76)
writev(any, any, any) @ ld-musl-aarch64.so.1+0x5351c(__stdio_write*+184)
ppoll(any, 3, any, 0, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x1ff94(__init_libc*+344)
newfstatat(STDIN_FILENO-0x7fffffff, "", any, AT_EMPTY_PATH) @ ld-musl-aarch64.so.1+0x52974(fstatat+112)
newfstatat(AT_FDCWD, any, any, 0) @ ld-musl-aarch64.so.1+0x529ac(fstatat+168)
newfstatat(0x80000000--1 as u32, "", any, AT_EMPTY_PATH) @ ld-musl-aarch64.so.1+0x529c8(fstatat+196)
fstat(STDIN_FILENO-0x7fffffff, any) @ ld-musl-aarch64.so.1+0x52940(fstatat+60)
capget(any, any) @ ld-musl-aarch64.so.1+0x241ec(capget+12)
capset(any, any) @ ld-musl-aarch64.so.1+0x241d0(capset+12)
exit(0) @ ld-musl-aarch64.so.1+0x60804
exit(0xfffffffffffff001-0xffffffffffffffff) @ ld-musl-aarch64.so.1+0x60804
exit(0) @ ld-musl-aarch64.so.1+0x623bc(pthread_exit+416)
exit_group(any) @ ld-musl-aarch64.so.1+0x206d8(_Exit+12)
futex(any, FUTEX_WAIT, any, 0, 0, 0)
futex(any, FUTEX_WAIT, non-NULL, 0, any, any u32)
futex(any, FUTEX_WAKE, 0-INT_MAX, any, any u32, INT_MAX)
futex(any, FUTEX_WAKE, 1, any, any, any)
futex(any, FUTEX_REQUEUE, 0, 1, ld-musl-aarch64.so.1+0xc2ab4, any)
futex(any, FUTEX_LOCK_PI-FUTEX_UNLOCK_PI, 0, 0, any, any)
futex(any, FUTEX_UNLOCK_PI, any, any, any, any)
futex(any, FUTEX_WAIT|FUTEX_PRIVATE_FLAG, any, 0, 0, 0)
futex(any, FUTEX_WAIT|FUTEX_PRIVATE_FLAG, non-NULL, 0, any, any u32)
futex(any, FUTEX_WAKE|FUTEX_PRIVATE_FLAG, 0-INT_MAX, any, any u32, INT_MAX)
futex(any, FUTEX_WAKE|FUTEX_PRIVATE_FLAG, 1, any, any, any)
futex(any, FUTEX_REQUEUE|FUTEX_PRIVATE_FLAG, 0, 1, ld-musl-aarch64.so.1+0xc2ab4, any)
futex(any, FUTEX_LOCK_PI|FUTEX_PRIVATE_FLAG-FUTEX_UNLOCK_PI|FUTEX_PRIVATE_FLAG, 0, 0, any, any)
futex(any, FUTEX_UNLOCK_PI|FUTEX_PRIVATE_FLAG, any, any, any, any)
futex(ld-musl-aarch64.so.1+0xc1e90(exit_sem*), FUTEX_WAKE, INT_MAX, 0, ld-musl-aarch64.so.1+0xc1e90(exit_sem*), any u32)
futex(ld-musl-aarch64.so.1+0xc1e90(exit_sem*), FUTEX_WAKE|FUTEX_PRIVATE_FLAG, INT_MAX, 0, ld-musl-aarch64.so.1+0xc1e90(exit_sem*), any u32)
futex(ld-musl-aarch64.so.1+0xc1eb0(caller_sem*), FUTEX_WAKE, INT_MAX, 0, ld-musl-aarch64.so.1+0xc1eb0(caller_sem*), any u32)
futex(ld-musl-aarch64.so.1+0xc1eb0(caller_sem*), FUTEX_WAKE|FUTEX_PRIVATE_FLAG, INT_MAX, 0, ld-musl-aarch64.so.1+0xc1eb0(caller_sem*), any u32)
futex(ld-musl-aarch64.so.1+0xc1ed0(target_sem*), FUTEX_WAKE, INT_MAX, 0, ld-musl-aarch64.so.1+0xc1ed0(target_sem*), any u32)
futex(ld-musl-aarch64.so.1+0xc1ed0(target_sem*), FUTEX_WAKE|FUTEX_PRIVATE_FLAG, INT_MAX, 0, ld-musl-aarch64.so.1+0xc1ed0(target_sem*), any u32)
futex(ld-musl-aarch64.so.1+0xc2680(vmlock*), FUTEX_WAIT, non-NULL, 0, ld-musl-aarch64.so.1+0xc2680(vmlock*), ld-musl-aarch64.so.1+0xc2684)
futex(ld-musl-aarch64.so.1+0xc2680(vmlock*), FUTEX_WAKE, INT_MAX, 0, ld-musl-aarch64.so.1+0xc2680(vmlock*), any)
futex(ld-musl-aarch64.so.1+0xc2680(vmlock*), FUTEX_WAIT|FUTEX_PRIVATE_FLAG, non-NULL, 0, ld-musl-aarch64.so.1+0xc2680(vmlock*), ld-musl-aarch64.so.1+0xc2684)
futex(ld-musl-aarch64.so.1+0xc2680(vmlock*), FUTEX_WAKE|FUTEX_PRIVATE_FLAG, INT_MAX, 0, ld-musl-aarch64.so.1+0xc2680(vmlock*), any)
futex(ld-musl-aarch64.so.1+0xc2a88, FUTEX_WAKE, INT_MAX, ld-musl-aarch64.so.1+0xc2a88, any, any)
futex(ld-musl-aarch64.so.1+0xc2e80(__thread_list_lock*), FUTEX_WAIT, non-NULL, 0, ld-musl-aarch64.so.1+0xc2e80(__thread_list_lock*), ld-musl-aarch64.so.1+0xc2ed8(tl_lock_waiters*))
futex(ld-musl-aarch64.so.1+0xc2e80(__thread_list_lock*), FUTEX_WAIT|FUTEX_PRIVATE_FLAG, non-NULL, 0, ld-musl-aarch64.so.1+0xc2e80(__thread_list_lock*), ld-musl-aarch64.so.1+0xc2ed8(tl_lock_waiters*))
set_robust_list(0, sizeof(struct robust_list_head)) @ ld-musl-aarch64.so.1+0x623e8(pthread_exit+460)
set_robust_list(any, sizeof(struct robust_list_head)) @ ld-musl-aarch64.so.1+0x634f0(__pthread_mutex_trylock_owner*+92)
nanosleep(any, 0) @ ld-musl-aarch64.so.1+0x60864
nanosleep(any, 0) @ ld-musl-aarch64.so.1+0x614f8(__syscall_cp_c*+200)
clock_gettime(any u32, any) @ [vdso]+0x37c(__kernel_clock_gettime+188)
clock_getres(any u32, any) @ [vdso]+0x76c(__kernel_clock_getres+100)
restart_syscall()
kill(0-LONG_MAX, SIGKILL) @ ld-musl-aarch64.so.1+0x24ca8(do_setgroups*+92)
kill(0-LONG_MAX, SIGKILL) @ ld-musl-aarch64.so.1+0x69334(do_setxid*+92)
tkill(any, SIGABRT) @ ld-musl-aarch64.so.1+0x20740(abort+84)
tkill(any, SIGABRT) @ ld-musl-aarch64.so.1+0x51d1c(raise+44)
tkill(any, SIGSETXID) @ ld-musl-aarch64.so.1+0x61394(cancel_handler*+132)
tkill(non-NULL, SIGSETXID) @ ld-musl-aarch64.so.1+0x63118(pthread_kill+68)
tkill(any, SIGSYNCCALL) @ ld-musl-aarch64.so.1+0x64cb0(__synccall*+380)
rt_sigaction(SIGABRT, any, 0, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x2072c(abort+64)
rt_sigaction(SIGSETXID-SIGSYNCCALL, any, 0, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x51dfc(__libc_sigaction*+140)
rt_sigprocmask(SIG_UNBLOCK, any, 0, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x20758(abort+108)
rt_sigprocmask(SIG_BLOCK, ld-musl-aarch64.so.1+0xa1060(all_mask*), any, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x51b58(__block_all_sigs*+24)
rt_sigprocmask(SIG_BLOCK, ld-musl-aarch64.so.1+0xa1058(app_mask*), any, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x51b78(__block_app_sigs*+24)
rt_sigprocmask(SIG_SETMASK, any, 0, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x51b94(__restore_sigs*+20)
rt_sigprocmask(SIG_UNBLOCK, any, 0, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x51ec8(__libc_sigaction*+344)
rt_sigprocmask(SIG_BLOCK, any, any, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x6424c(pthread_sigmask+24)
rt_sigprocmask(SIG_SETMASK, any, 0, sizeof(kernel_sigset_t)) @ ld-musl-aarch64.so.1+0x6424c(pthread_sigmask+24)
rt_sigreturn(any) @ ld-musl-aarch64.so.1+0x51b14
getresuid(any, any, any) @ ld-musl-aarch64.so.1+0x3c1a0(getresuid+12)
getresgid(any, any, any) @ ld-musl-aarch64.so.1+0x3c184(getresgid+12)
getgroups(any, any) @ ld-musl-aarch64.so.1+0x68be4(getgroups+16)
setgroups(any, any) @ ld-musl-aarch64.so.1+0x24c6c(do_setgroups*+32)
setgroups(any, any) @ ld-musl-aarch64.so.1+0x692f8(do_setxid*+32)
prctl(PR_SET_PDEATHSIG, any u32, any, any, any) @ ld-musl-aarch64.so.1+0x249bc(prctl+48)
prctl(PR_GET_PDEATHSIG, any, any, any, any) @ ld-musl-aarch64.so.1+0x249bc(prctl+48)
prctl(PR_SET_KEEPCAPS, 1, 0, 0, 0) @ ld-musl-aarch64.so.1+0x249bc(prctl+48)
prctl(PR_CAPBSET_READ, 0-INT_MAX, any, any, any) @ ld-musl-aarch64.so.1+0x249bc(prctl+48)
prctl(PR_CAPBSET_READ, any, 0, 0, 0) @ ld-musl-aarch64.so.1+0x249bc(prctl+48)
prctl(PR_CAPBSET_DROP, any u32, 0, 0, 0) @ ld-musl-aarch64.so.1+0x249bc(prctl+48)
prctl(PR_GET_SECUREBITS, 0, 0, 0, 0) @ ld-musl-aarch64.so.1+0x249bc(prctl+48)
prctl(PR_SET_SECUREBITS, any u32, 0, 0, 0) @ ld-musl-aarch64.so.1+0x249bc(prctl+48)
prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0) @ ld-musl-aarch64.so.1+0x249bc(prctl+48)
prctl(PR_GET_NO_NEW_PRIVS, 0, 0, 0, 0) @ ld-musl-aarch64.so.1+0x249bc(prctl+48)
prctl(PR_CAP_AMBIENT, PR_CAP_AMBIENT_IS_SET-PR_CAP_AMBIENT_RAISE, any, 0, 0) @ ld-musl-aarch64.so.1+0x249bc(prctl+48)
prctl(PR_CAP_AMBIENT, PR_CAP_AMBIENT_LOWER, any u32, 0, 0) @ ld-musl-aarch64.so.1+0x249bc(prctl+48)
gettimeofday(non-NULL, any) @ [vdso]+0x658(__kernel_gettimeofday+256)
getpid() @ ld-musl-aarch64.so.1+0x24c9c(do_setgroups*+80)
getpid() @ ld-musl-aarch64.so.1+0x69328(do_setxid*+80)
getuid() @ ld-musl-aarch64.so.1+0x68d48(getuid+4)
gettid() @ ld-musl-aarch64.so.1+0x3d518(syscall+76)
gettid() @ ld-musl-aarch64.so.1+0x64c08(__synccall*+212)
socket(AF_UNIX, SOCK_STREAM|SOCK_CLOEXEC, 0) @ ld-musl-aarch64.so.1+0x45c5c(socket+40)
socket(AF_UNIX, SOCK_STREAM, 0) @ ld-musl-aarch64.so.1+0x45c94(socket+96)
connect(any, ld-musl-aarch64.so.1+0xa1040(addr*), 24) @ ld-musl-aarch64.so.1+0x60864
connect(any, ld-musl-aarch64.so.1+0xa1040(addr*), 24) @ ld-musl-aarch64.so.1+0x614f8(__syscall_cp_c*+200)
sendmsg(any, any, MSG_NOSIGNAL) @ ld-musl-aarch64.so.1+0x60864
sendmsg(any, any, MSG_NOSIGNAL) @ ld-musl-aarch64.so.1+0x614f8(__syscall_cp_c*+200)
brk(any) @ ld-musl-aarch64.so.1+0x294b4(__malloc_alloc_meta*+332)
brk(0) @ ld-musl-aarch64.so.1+0x2956c(__malloc_alloc_meta*+516)
brk(any) @ ld-musl-aarch64.so.1+0x2958c(__malloc_alloc_meta*+548)
munmap(any, any) @ ld-musl-aarch64.so.1+0x3e250(munmap+36)
munmap(any, any) @ ld-musl-aarch64.so.1+0x607fc
mremap(any, NULL-0xfffffffffffff000, NULL-0x7ffffffffffffffe, MREMAP_MAYMOVE, 0) @ ld-musl-aarch64.so.1+0x3e160(mremap+48)
mmap(0, NULL-0x7ffffffffffffffe, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) @ ld-musl-aarch64.so.1+0x3e070(mmap+64)
mmap(0, NULL-0x7ffffffffffffffe, PROT_READ, MAP_SHARED, any, 0) @ ld-musl-aarch64.so.1+0x3e070(mmap+64)
mmap(0, NULL-0x7ffffffffffffffe, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) @ ld-musl-aarch64.so.1+0x3e070(mmap+64)
mmap(any, any, any, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, any, any) @ ld-musl-aarch64.so.1+0x3e070(mmap+64)
mprotect(any, any, PROT_READ|PROT_WRITE) @ ld-musl-aarch64.so.1+0x3e120(mprotect+56)
mprotect(any, any, PROT_READ) @ ld-musl-aarch64.so.1+0x6b124(reloc_all*+268)
landlock_create_ruleset(any, 8, 0) @ ld-musl-aarch64.so.1+0x3d518(syscall+76)
landlock_add_rule(STDIN_FILENO-0xfffffffe, 1, any, 0) @ ld-musl-aarch64.so.1+0x3d518(syscall+76)
landlock_restrict_self(any u32, 0) @ ld-musl-aarch64.so.1+0x3d518(syscall+76)
