callander: permitted syscalls: dup(any) @ ld-musl-aarch64.so.1+0x64284(dup+16)
fcntl(any, F_SETFD, 1) @ ld-musl-aarch64.so.1+0x2111c(open+136)
ioctl(any u32, TIOCGWINSZ, any) @ ld-musl-aarch64.so.1+0x51464(__stdout_write*+56)
flock(any, any) @ ld-musl-aarch64.so.1+0x242b4(flock+20)
faccessat(AT_FDCWD, 0, W_OK|R_OK) @ ld-musl-aarch64.so.1+0x64150(access+32)
openat(AT_FDCWD, ld-musl-aarch64.so.1+0x9b2e1, O_RDWR|O_NOFOLLOW, any) @ ld-musl-aarch64.so.1+0x20548(__init_libc*+380)
openat(AT_FDCWD, 0, any, any) @ ld-musl-aarch64.so.1+0x5d210
openat(AT_FDCWD, 0, any, any) @ ld-musl-aarch64.so.1+0x5dcc8(__syscall_cp_c*+76)
close(any) @ ld-musl-aarch64.so.1+0x51180(__stdio_close*+24)
close(any) @ ld-musl-aarch64.so.1+0x5d210
close(any) @ ld-musl-aarch64.so.1+0x5dcc8(__syscall_cp_c*+76)
lseek(any, any, any) @ ld-musl-aarch64.so.1+0x64a28(lseek64+12)
read(any u32, any, any) @ ld-musl-aarch64.so.1+0x512b0(__stdio_read*+76)
readv(any u32, any, 2) @ ld-musl-aarch64.so.1+0x512b0(__stdio_read*+76)
writev(any u32, any, any) @ ld-musl-aarch64.so.1+0x51388(__stdio_write*+76)
ppoll(any, 3, any, 0, 8) @ ld-musl-aarch64.so.1+0x20520(__init_libc*+340)
exit(any) @ ld-musl-aarch64.so.1+0x5d1b0
exit(any) @ ld-musl-aarch64.so.1+0x5d1e8
exit(0) @ ld-musl-aarch64.so.1+0x5e8d0(pthread_exit+396)
exit_group(any) @ ld-musl-aarch64.so.1+0x20bd4(_Exit+12)
set_tid_address(any) @ ld-musl-aarch64.so.1+0x5e958(start*+64)
futex(any, any, any, 0, any, any)
futex(any, any, 1, any, any, any)
futex(any, FUTEX_WAKE, INT_MAX, INT_MAX, any, any)
futex(any, FUTEX_REQUEUE, 0, 1, ld-musl-aarch64.so.1+0xb1dec, ld-musl-aarch64.so.1+0xb1dec)
futex(any, FUTEX_UNLOCK_PI, any, any, any, any)
futex(any, FUTEX_WAKE|FUTEX_PRIVATE_FLAG, INT_MAX, INT_MAX, any, any)
futex(any, FUTEX_REQUEUE|FUTEX_PRIVATE_FLAG, 0, 1, ld-musl-aarch64.so.1+0xb1dec, ld-musl-aarch64.so.1+0xb1dec)
futex(any, FUTEX_UNLOCK_PI|FUTEX_PRIVATE_FLAG, any, any, any, any)
futex(ld-musl-aarch64.so.1+0xb0410(maplock*), any, 0-INT_MAX, ld-musl-aarch64.so.1+0xb0410(maplock*), any u32, any u32)
futex(ld-musl-aarch64.so.1+0xb1118(lock*), any, 0-INT_MAX, ld-musl-aarch64.so.1+0xb1118(lock*), any u32, any u32)
futex(ld-musl-aarch64.so.1+0xb1158(key_lock*), any, 0-INT_MAX, ld-musl-aarch64.so.1+0xb1158(key_lock*), any u32, any u32)
futex(ld-musl-aarch64.so.1+0xb1dc0, FUTEX_WAKE, INT_MAX, ld-musl-aarch64.so.1+0xb1dc0, any, any)
futex(ld-musl-aarch64.so.1+0xb1e58(lock*), any, 0-INT_MAX, ld-musl-aarch64.so.1+0xb1e58(lock*), any u32, any u32)
futex(ld-musl-aarch64.so.1+0xb232c(vmlock*), FUTEX_WAKE, INT_MAX, ld-musl-aarch64.so.1+0xb232c(vmlock*), any, any)
futex(ld-musl-aarch64.so.1+0xb232c(vmlock*), FUTEX_WAKE|FUTEX_PRIVATE_FLAG, INT_MAX, ld-musl-aarch64.so.1+0xb232c(vmlock*), any, any)
set_robust_list(0, 24) @ ld-musl-aarch64.so.1+0x5e898(pthread_exit+340)
set_robust_list(any, 24) @ ld-musl-aarch64.so.1+0x5f918(__pthread_mutex_trylock_owner*+204)
timer_create(CLOCK_MONOTONIC, any, any) @ ld-musl-aarch64.so.1+0x63bc0(timer_create+144)
timer_create(CLOCK_MONOTONIC, any, any) @ ld-musl-aarch64.so.1+0x63cf4(timer_create+452)
timer_settime(any, 0, any, 0) @ ld-musl-aarch64.so.1+0x63e04(timer_settime+32)
timer_delete(0-INT_MAX) @ ld-musl-aarch64.so.1+0x63ae0(start*+196)
timer_delete(any) @ ld-musl-aarch64.so.1+0x63d84(timer_delete+56)
clock_gettime(CLOCK_MONOTONIC_RAW, any) @ ld-musl-aarch64.so.1+0x62794(clock_gettime+72)
clock_gettime(any u32, any) @ [vdso]+0x37c(__kernel_clock_gettime+188)
clock_getres(any u32, any) @ [vdso]+0x76c(__kernel_clock_getres+100)
sched_setscheduler(any u32, any, any) @ ld-musl-aarch64.so.1+0x5edf4(pthread_create+1040)
restart_syscall()
tkill(any u32, SIGSETXID) @ ld-musl-aarch64.so.1+0x5dc34(cancel_handler*+124)
tkill(non-NULL, SIGSETXID) @ ld-musl-aarch64.so.1+0x5f4d0(pthread_kill+68)
tkill(any u32, SIGCANCEL) @ ld-musl-aarch64.so.1+0x63d74(timer_delete+40)
rt_sigaction(SIGALRM, any, 0, 8) @ ld-musl-aarch64.so.1+0x4fde0(__libc_sigaction*+240)
rt_sigaction(SIGCANCEL-SIGSETXID, any, 0, 8) @ ld-musl-aarch64.so.1+0x4fde0(__libc_sigaction*+240)
rt_sigprocmask(SIG_BLOCK, ld-musl-aarch64.so.1+0x6e528(all_mask*), any, 8) @ ld-musl-aarch64.so.1+0x4fadc(__block_all_sigs*+24)
rt_sigprocmask(SIG_BLOCK, ld-musl-aarch64.so.1+0x6e520(app_mask*), any, 8) @ ld-musl-aarch64.so.1+0x4fafc(__block_app_sigs*+24)
rt_sigprocmask(SIG_SETMASK, any, 0, 8) @ ld-musl-aarch64.so.1+0x4fb18(__restore_sigs*+20)
rt_sigprocmask(SIG_UNBLOCK, any, 0, 8) @ ld-musl-aarch64.so.1+0x4fe68(__libc_sigaction*+376)
rt_sigprocmask(SIG_SETMASK, any, 0, 8) @ ld-musl-aarch64.so.1+0x5e998(start*+128)
rt_sigprocmask(SIG_UNBLOCK, any, 0, 8) @ ld-musl-aarch64.so.1+0x5ea90(pthread_create+172)
rt_sigprocmask(SIG_BLOCK, any, any, 8) @ ld-musl-aarch64.so.1+0x605cc(pthread_sigmask+24)
rt_sigprocmask(SIG_BLOCK, any, 0, 8) @ ld-musl-aarch64.so.1+0x63c88(timer_create+344)
rt_sigtimedwait(any, any, 0, 8) @ ld-musl-aarch64.so.1+0x5d210
rt_sigtimedwait(any, any, 0, 8) @ ld-musl-aarch64.so.1+0x5dcc8(__syscall_cp_c*+76)
rt_sigreturn(any) @ ld-musl-aarch64.so.1+0x4fa98
gettimeofday(non-NULL, any) @ [vdso]+0x658(__kernel_gettimeofday+256)
brk(0) @ ld-musl-aarch64.so.1+0x2b5b4(__malloc_alloc_meta*+296)
brk(any) @ ld-musl-aarch64.so.1+0x2b5d4(__malloc_alloc_meta*+328)
brk(any) @ ld-musl-aarch64.so.1+0x2b644(__malloc_alloc_meta*+440)
munmap(NULL-0xfffffffffffffffe, any) @ ld-musl-aarch64.so.1+0x3e8bc(munmap+36)
munmap(any, any) @ ld-musl-aarch64.so.1+0x5d1a8
clone(CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID|CLONE_DETACHED, any, any, any, ld-musl-aarch64.so.1+0xb2230(__thread_list_lock*)) @ ld-musl-aarch64.so.1+0x5d1d0
mmap(0, any, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) @ ld-musl-aarch64.so.1+0x3e710(mmap+148)
mmap(0, any, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) @ ld-musl-aarch64.so.1+0x3e710(mmap+148)
mmap(any, any, PROT_NONE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) @ ld-musl-aarch64.so.1+0x3e710(mmap+148)
mprotect(any, any, PROT_READ) @ ld-musl-aarch64.so.1+0x3e77c(mprotect+56)
mprotect(any, any, PROT_READ|PROT_WRITE) @ ld-musl-aarch64.so.1+0x3e77c(mprotect+56)
madvise(any, any, MADV_FREE) @ ld-musl-aarch64.so.1+0x3e614(madvise+16)
membarrier(MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED, 0) @ ld-musl-aarch64.so.1+0x24528(__membarrier_init*+12)
